name: Example Browser Tests

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  workflow_dispatch:
  schedule:
    # Run daily at 9 AM UTC
    - cron: "0 9 * * *"

jobs:
  browser-tests:
    name: Run Browser Use Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Browser Use Tests
        id: browser-tests
        uses: ./
        with:
          api-key: ${{ secrets.BROWSER_USE_API_KEY }}
          test-directory: tests/examples
          llm-model: browser-use-llm
          fail-on-error: true
          timeout: 300
          save-outputs: true

      - name: Upload Test Artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: browser-test-results-${{ github.run_number }}
          path: |
            test-results.json
            browser-use-outputs/
          retention-days: 30
          if-no-files-found: warn

      - name: Display Test Results
        if: always()
        run: |
          echo "## 📊 Browser Test Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Total Tests**: ${{ steps.browser-tests.outputs.total-tests }}" >> $GITHUB_STEP_SUMMARY
          echo "- **✅ Passed**: ${{ steps.browser-tests.outputs.passed-tests }}" >> $GITHUB_STEP_SUMMARY
          echo "- **❌ Failed**: ${{ steps.browser-tests.outputs.failed-tests }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ -f test-results.json ]; then
            echo "### Detailed Results" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo '```json' >> $GITHUB_STEP_SUMMARY
            cat test-results.json >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
          fi

      - name: Comment PR with Results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const results = JSON.parse('${{ steps.browser-tests.outputs.results }}');
            const summary = results.summary;

            let body = `## 🤖 Browser Use Test Results\n\n`;
            body += `### 📊 Summary\n\n`;
            body += `| Metric | Value |\n`;
            body += `|--------|-------|\n`;
            body += `| Total Tests | ${summary.total} |\n`;
            body += `| ✅ Passed | ${summary.passed} |\n`;
            body += `| ❌ Failed | ${summary.failed} |\n`;
            body += `| ⚠️ Errors | ${summary.errors} |\n`;
            body += `| Success Rate | ${summary.success_rate} |\n\n`;

            if (results.results && results.results.length > 0) {
              body += `### 📋 Individual Test Results\n\n`;
              results.results.forEach(result => {
                const icon = result.status === 'passed' ? '✅' :
                            result.status === 'failed' ? '❌' : '⚠️';
                body += `${icon} **${result.name}** (${result.duration.toFixed(2)}s)\n`;
                if (result.error) {
                  body += `   - Error: \`${result.error}\`\n`;
                }
              });
            }

            body += `\n---\n`;
            body += `🔗 [View Full Results](${context.payload.repository.html_url}/actions/runs/${context.runId})`;

            github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: body
            });

  notify-on-failure:
    name: Notify on Test Failure
    runs-on: ubuntu-latest
    needs: browser-tests
    if: failure() && github.event_name == 'schedule'

    steps:
      - name: Create Issue on Failure
        uses: actions/github-script@v7
        with:
          script: |
            const title = `🔴 Daily Browser Tests Failed - ${new Date().toISOString().split('T')[0]}`;
            const body = `## Daily Browser Test Failure\n\n` +
                        `The scheduled browser tests have failed.\n\n` +
                        `**Workflow Run**: ${context.payload.repository.html_url}/actions/runs/${context.runId}\n\n` +
                        `Please investigate and fix the failing tests.\n\n` +
                        `---\n` +
                        `*This issue was automatically created by the Browser Use Test workflow.*`;

            // Check if similar issue already exists
            const issues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              labels: 'browser-tests,automated'
            });

            const existingIssue = issues.data.find(issue =>
              issue.title.includes('Daily Browser Tests Failed')
            );

            if (existingIssue) {
              // Add comment to existing issue
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: existingIssue.number,
                body: `Tests failed again on ${new Date().toISOString().split('T')[0]}\n\n` +
                      `**Workflow Run**: ${context.payload.repository.html_url}/actions/runs/${context.runId}`
              });
            } else {
              // Create new issue
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: title,
                body: body,
                labels: ['browser-tests', 'automated', 'bug']
              });
            }
